version: '3.8'

services:
  # Application service
  app:
    image: virtual-game-app:latest
    container_name: virtual-game-app
    depends_on:
      - postgres
      - redis
      - kafka
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=dev
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/virtual_casino
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
      - SPRING_DATA_REDIS_HOST=redis
      - SPRING_DATA_REDIS_PORT=6379
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    networks:
      - virtual-game-network
    # Volumes for development (commented out for production build)
    # volumes:
    #   - ./src:/app/src
    restart: unless-stopped

  # PostgreSQL database
  postgres:
    image: postgres:14-alpine
    container_name: virtual-game-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=virtual_casino
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - virtual-game-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: virtual-game-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - virtual-game-network
    restart: unless-stopped
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Zookeeper (required for Kafka)
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: virtual-game-zookeeper
    ports:
      - "2181:2181"
    environment:
      - ZOOKEEPER_CLIENT_PORT=2181
      - ZOOKEEPER_TICK_TIME=2000
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-logs:/var/lib/zookeeper/log
    networks:
      - virtual-game-network
    restart: unless-stopped

  # Kafka for event messaging
  kafka:
    image: confluentinc/cp-kafka:7.3.0
    container_name: virtual-game-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
      - "9308:9308"
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      - KAFKA_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_JMX_HOSTNAME=kafka
      - KAFKA_JMX_PORT=9308
      - KAFKA_JMX_OPTS=-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.local.only=false -Dcom.sun.management.jmxremote.port=9308 -Dcom.sun.management.jmxremote.rmi.port=9308
    volumes:
      - kafka-data:/var/lib/kafka/data
    networks:
      - virtual-game-network
    restart: unless-stopped

  # Kafka UI for monitoring Kafka (optional, for development convenience)
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: virtual-game-kafka-ui
    depends_on:
      - kafka
    ports:
      - "8090:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=virtual-game-kafka
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
    networks:
      - virtual-game-network
    restart: unless-stopped

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: virtual-game-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - virtual-game-network
    restart: unless-stopped

  # Grafana for visualization and alerting
  grafana:
    image: grafana/grafana:latest
    container_name: virtual-game-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - virtual-game-network
    depends_on:
      - prometheus
    restart: unless-stopped

  # PostgreSQL metrics exporter
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: virtual-game-postgres-exporter
    ports:
      - "9187:9187"
    environment:
      - DATA_SOURCE_NAME=postgresql://postgres:postgres@postgres:5432/virtual_casino?sslmode=disable
    networks:
      - virtual-game-network
    depends_on:
      - postgres
    restart: unless-stopped

  # Redis metrics exporter
  redis-exporter:
    image: oliver006/redis_exporter:latest
    container_name: virtual-game-redis-exporter
    ports:
      - "9121:9121"
    environment:
      - REDIS_ADDR=redis://redis:6379
    networks:
      - virtual-game-network
    depends_on:
      - redis
    restart: unless-stopped

networks:
  virtual-game-network:
    driver: bridge

volumes:
  postgres-data:
  redis-data:
  zookeeper-data:
  zookeeper-logs:
  kafka-data:
  prometheus-data:
  grafana-data:
