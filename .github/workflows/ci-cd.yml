name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_DB: virtual_casino_test
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:latest
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      kafka:
        image: confluentinc/cp-kafka:latest
        env:
          KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
          KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
          KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
          KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
          KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
        ports:
          - 9092:9092
        options: >-
          --health-cmd "kafka-topics --list --bootstrap-server localhost:9092"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      - name: Build with Maven
        run: mvn -B clean package -DskipTests

      - name: Run Tests
        run: mvn -B test
        env:
          SPRING_PROFILES_ACTIVE: test
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/virtual_casino_test
          SPRING_DATASOURCE_USERNAME: test
          SPRING_DATASOURCE_PASSWORD: test
          SPRING_DATA_REDIS_HOST: localhost
          SPRING_DATA_REDIS_PORT: 6379
          SPRING_KAFKA_BOOTSTRAP_SERVERS: localhost:9092

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: app-build
          path: target/*.jar

  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      - name: Run Code Quality Checks
        run: mvn -B verify -DskipTests

      # Uncomment when SonarQube is set up
      # - name: SonarQube Analysis
      #   run: mvn -B sonar:sonar
      #   env:
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      #     SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [build, code-quality]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: development

    steps:
      - name: Download Build Artifacts
        uses: actions/download-artifact@v3
        with:
          name: app-build
          path: target

      - name: Deploy to Dev Environment
        run: |
          echo "Deploying to development environment..."
          # Add deployment scripts here (e.g., SSH, AWS CLI, etc.)
          # Example: aws s3 cp target/*.jar s3://my-bucket/dev/
        env:
          SPRING_PROFILES_ACTIVE: dev

  deploy-test:
    name: Deploy to Test
    runs-on: ubuntu-latest
    needs: deploy-dev
    environment: test

    steps:
      - name: Download Build Artifacts
        uses: actions/download-artifact@v3
        with:
          name: app-build
          path: target

      - name: Deploy to Test Environment
        run: |
          echo "Deploying to test environment..."
          # Add deployment scripts here
        env:
          SPRING_PROFILES_ACTIVE: test

  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: deploy-test
    environment: production
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Download Build Artifacts
        uses: actions/download-artifact@v3
        with:
          name: app-build
          path: target

      - name: Deploy to Production Environment
        run: |
          echo "Deploying to production environment..."
          # Add deployment scripts here
        env:
          SPRING_PROFILES_ACTIVE: prod
